name: Java CI with Gradle

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

  # 환경설정
env:
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/gradlesample02
  VERSION: ${{ github.sha }}
  NAME: gs2


jobs:
  build:
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v3

    - name: setup jdk11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: init with gradle
      uses: gradle/gradle-build-action@v2

    - run: gradle init  

    - name: Build with gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: 7.5.1
        arguments: build

    - name: docker image build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/gradlesample02 .

    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: dockerhub push    
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/gradlesample02

  deploy:
    needs: build  # build 후에 실행되도록 정의
    name: Deploy
    runs-on: [ self-hosted, label-go ] # AWS ./configure에서 사용할 label명
    steps:
      - name: Login to dockerhub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # 3000 -> 80 포트로 수행하도록 지정
      - name: Docker run
        run: |
          docker stop ${{ env.NAME }} && docker rm ${{ env.NAME }} && docker rmi ${{ env.DOCKER_IMAGE }}:latest
          docker run -d -p 50002:50002 --name ${{ env.NAME }} --restart always ${{ env.DOCKER_IMAGE }}:latest
